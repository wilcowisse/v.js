/* from expand.txt: removed BlockStatement, operators, identifiers, literals,nullnodes**/
var triNodes = [
	 'ExpressionStatement.expression/AssignmentExpression'
	,'ExpressionStatement.expression/UpdateExpression'
	,'ExpressionStatement.expression/CallExpression'
	,'IfStatement.test/UnaryExpression'
	,'IfStatement.test/BinaryExpression'
	,'IfStatement.test/LogicalExpression'
	,'IfStatement.test/CallExpression'
	,'IfStatement.test/MemberExpression'
	,'IfStatement.consequent/ExpressionStatement'
	,'IfStatement.consequent/ReturnStatement'
	,'ReturnStatement.argument/ThisExpression'
	,'ReturnStatement.argument/ObjectExpression'
	,'ReturnStatement.argument/FunctionExpression'
	,'ReturnStatement.argument/BinaryExpression'
	,'ReturnStatement.argument/ConditionalExpression'
	,'ReturnStatement.argument/CallExpression'
	,'ReturnStatement.argument/MemberExpression'
	,'ThrowStatement.argument/NewExpression'
	,'ForStatement.init/AssignmentExpression'
	,'ForStatement.init/VariableDeclaration'
	,'ForStatement.test/BinaryExpression'
	,'ForStatement.update/UpdateExpression'
	,'VariableDeclarator.init/ThisExpression'
	,'VariableDeclarator.init/ArrayExpression'
	,'VariableDeclarator.init/ObjectExpression'
	,'VariableDeclarator.init/FunctionExpression'
	,'VariableDeclarator.init/BinaryExpression'
	,'VariableDeclarator.init/LogicalExpression'
	,'VariableDeclarator.init/ConditionalExpression'
	,'VariableDeclarator.init/NewExpression'
	,'VariableDeclarator.init/CallExpression'
	,'VariableDeclarator.init/MemberExpression'
	,'VariableDeclarator.init/CMemberExpression'
	,'ArrayExpression.elements/ArrayExpression'
	,'ArrayExpression.elements/ObjectExpression'
	,'ArrayExpression.elements/UnaryExpression'
	,'ArrayExpression.elements/MemberExpression'
	,'ArrayExpression.elements/CMemberExpression'
	,'Property.value/ArrayExpression'
	,'Property.value/ObjectExpression'
	,'Property.value/FunctionExpression'
	,'Property.value/BinaryExpression'
	,'Property.value/CallExpression'
	,'Property.value/MemberExpression'
	,'SequenceExpression.expressions/AssignmentExpression'
	,'SequenceExpression.expressions/CallExpression'
	,'UnaryExpression.argument/CallExpression'
	,'UnaryExpression.argument/MemberExpression'
	,'UnaryExpression.argument/CMemberExpression'
	,'UnaryExpression.argument/BracketExpression'
	,'BinaryExpression.left/UnaryExpression'
	,'BinaryExpression.left/BinaryExpression'
	,'BinaryExpression.left/CallExpression'
	,'BinaryExpression.left/MemberExpression'
	,'BinaryExpression.left/CMemberExpression'
	,'BinaryExpression.left/BracketExpression'
	,'BinaryExpression.right/UnaryExpression'
	,'BinaryExpression.right/BinaryExpression'
	,'BinaryExpression.right/CallExpression'
	,'BinaryExpression.right/MemberExpression'
	,'BinaryExpression.right/CMemberExpression'
	,'BinaryExpression.right/BracketExpression'
	,'AssignmentExpression.left/MemberExpression'
	,'AssignmentExpression.left/CMemberExpression'
	,'AssignmentExpression.right/ArrayExpression'
	,'AssignmentExpression.right/ObjectExpression'
	,'AssignmentExpression.right/FunctionExpression'
	,'AssignmentExpression.right/UnaryExpression'
	,'AssignmentExpression.right/BinaryExpression'
	,'AssignmentExpression.right/AssignmentExpression'
	,'AssignmentExpression.right/LogicalExpression'
	,'AssignmentExpression.right/ConditionalExpression'
	,'AssignmentExpression.right/NewExpression'
	,'AssignmentExpression.right/CallExpression'
	,'AssignmentExpression.right/MemberExpression'
	,'AssignmentExpression.right/CMemberExpression'
	,'LogicalExpression.left/UnaryExpression'
	,'LogicalExpression.left/BinaryExpression'
	,'LogicalExpression.left/LogicalExpression'
	,'LogicalExpression.left/CallExpression'
	,'LogicalExpression.left/MemberExpression'
	,'LogicalExpression.right/UnaryExpression'
	,'LogicalExpression.right/BinaryExpression'
	,'LogicalExpression.right/CallExpression'
	,'LogicalExpression.right/MemberExpression'
	,'LogicalExpression.right/BracketExpression'
	,'ConditionalExpression.test/BinaryExpression'
	,'ConditionalExpression.test/MemberExpression'
	,'ConditionalExpression.consequent/CallExpression'
	,'ConditionalExpression.consequent/MemberExpression'
	,'NewExpression.callee/MemberExpression'
	,'NewExpression.arguments/BinaryExpression'
	,'NewExpression.arguments/MemberExpression'
	,'CallExpression.callee/MemberExpression'
	,'CallExpression.callee/BracketExpression'
	,'CallExpression.arguments/ThisExpression'
	,'CallExpression.arguments/ArrayExpression'
	,'CallExpression.arguments/ObjectExpression'
	,'CallExpression.arguments/FunctionExpression'
	,'CallExpression.arguments/UnaryExpression'
	,'CallExpression.arguments/BinaryExpression'
	,'CallExpression.arguments/LogicalExpression'
	,'CallExpression.arguments/CallExpression'
	,'CallExpression.arguments/MemberExpression'
	,'CallExpression.arguments/CMemberExpression'
	,'MemberExpression.object/ThisExpression'
	,'MemberExpression.object/CallExpression'
	,'MemberExpression.object/MemberExpression'
	,'MemberExpression.object/CMemberExpression'
	,'CMemberExpression.object/MemberExpression'
	,'CMemberExpression.object/CMemberExpression'
	,'CMemberExpression.property/BinaryExpression'
	,'CMemberExpression.property/MemberExpression'
	];
	
if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
    module.exports = triNodes;
}
