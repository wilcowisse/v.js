/* from expand.txt: remove BlockStatement, operators, identifiers, literals, nullnodes, variabledeclaration.kind **/
var triNodes = [
	'ExpressionStatement.expression/AssignmentExpression'
	,'ExpressionStatement.expression/CallExpression'
	,'IfStatement.test/UnaryExpression'
	,'IfStatement.test/BinaryExpression'
	,'IfStatement.test/LogicalExpression'
	,'IfStatement.test/MemberExpression'
	,'IfStatement.consequent/ExpressionStatement'
	,'IfStatement.consequent/ReturnStatement'
	,'ReturnStatement.argument/CallExpression'
	,'ForStatement.init/VariableDeclaration'
	,'ForStatement.test/BinaryExpression'
	,'ForStatement.update/UpdateExpression'
	,'VariableDeclarator.init/ArrayExpression'
	,'VariableDeclarator.init/ObjectExpression'
	,'VariableDeclarator.init/BinaryExpression'
	,'VariableDeclarator.init/CallExpression'
	,'VariableDeclarator.init/MemberExpression'
	,'VariableDeclarator.init/CMemberExpression'
	,'Property.value/ArrayExpression'
	,'Property.value/ObjectExpression'
	,'Property.value/FunctionExpression'
	,'Property.value/MemberExpression'
	,'UnaryExpression.argument/MemberExpression'
	,'BinaryExpression.left/UnaryExpression'
	,'BinaryExpression.left/BinaryExpression'
	,'BinaryExpression.left/CallExpression'
	,'BinaryExpression.left/MemberExpression'
	,'BinaryExpression.left/CMemberExpression'
	,'BinaryExpression.left/BracketExpression'
	,'BinaryExpression.right/CallExpression'
	,'BinaryExpression.right/MemberExpression'
	,'AssignmentExpression.left/MemberExpression'
	,'AssignmentExpression.left/CMemberExpression'
	,'AssignmentExpression.right/ObjectExpression'
	,'AssignmentExpression.right/FunctionExpression'
	,'AssignmentExpression.right/BinaryExpression'
	,'AssignmentExpression.right/CallExpression'
	,'AssignmentExpression.right/MemberExpression'
	,'AssignmentExpression.right/CMemberExpression'
	,'LogicalExpression.left/BinaryExpression'
	,'LogicalExpression.left/MemberExpression'
	,'LogicalExpression.right/BinaryExpression'
	,'CallExpression.callee/MemberExpression'
	,'CallExpression.arguments/ThisExpression'
	,'CallExpression.arguments/ObjectExpression'
	,'CallExpression.arguments/FunctionExpression'
	,'CallExpression.arguments/BinaryExpression'
	,'CallExpression.arguments/CallExpression'
	,'CallExpression.arguments/MemberExpression'
	,'CallExpression.arguments/CMemberExpression'
	,'MemberExpression.object/ThisExpression'
	,'MemberExpression.object/CallExpression'
	,'MemberExpression.object/MemberExpression'
	,'MemberExpression.object/CMemberExpression'
	,'CMemberExpression.object/MemberExpression'
	];
	
if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
    module.exports = triNodes;
}
